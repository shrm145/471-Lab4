module PipelineExecute(  MemWrite_out, MemToReg_out, RegDest_out, RegWrite_out, 
                         MemWrite_in, MemToReg_in, RegDest_in, RegWrite_in, clk, reset);
								
  output  MemWrite_out, MemToReg_out, RegDest_out, RegWrite_out;
  input   MemWrite_in, MemToReg_in, RegDest_in, RegWrite_in, clk, reset;
  wire [3:0] dffOut;
  wire [3:0] dffIn;
 
 // Assign output of flip flops to the output of the module
assign MemWrite_out = dffOut[0];
assign MemToReg_out = dffOut[1];
assign RegDest_out = dffOut[2];
assign RegWrite_out = dffOut[3];

// Assign the input of flip flops to the input of module
assign dffIn[0] = MemWrite_in;
assign dffIn[1] = MemToReg_in;
assign dffIn[2] = RegDest_in;
assign dffIn[3] = RegWrite_in;

 genvar i; 
 generate
 for(i=0; i< 3; i++) begin : eachSignal
		D_FF signals (.q(dffOut[i]), .d(dffIn[i]), .reset, .clk);
		end 
endgenerate
endmodule 

